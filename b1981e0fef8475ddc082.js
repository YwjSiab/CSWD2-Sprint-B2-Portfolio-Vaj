class CameraCapture extends HTMLElement{#t=null;connectedCallback(){const t=this.getAttribute("input-name")||"photoDataUrl",e=this.getAttribute("shutter-src")||"shutter.mp3";this.innerHTML=`\n      <div class="camera-capture">\n        <div class="camera-row">\n          <video autoplay playsinline muted></video>\n          <canvas aria-label="snapshot" hidden></canvas>\n        </div>\n\n        <div class="camera-controls">\n          <button type="button" id="startBtn">Start Camera</button>\n          <button type="button" id="snapBtn" disabled>Take Photo</button>\n          <button type="button" id="retakeBtn" disabled>Retake</button>\n          <button type="button" id="stopBtn" disabled>Stop</button>\n        </div>\n\n        <div class="camera-preview">\n          <img id="preview" alt="Your snapshot will appear here" />\n        </div>\n\n        <input type="hidden" name="${t}" id="${t}" />\n        <audio id="shutter" preload="auto" src="${e}"></audio>\n\n        <p id="camMsg" class="cam-msg" role="status"></p>\n      </div>\n    `,this.$={video:this.querySelector("video"),canvas:this.querySelector("canvas"),start:this.querySelector("#startBtn"),snap:this.querySelector("#snapBtn"),retake:this.querySelector("#retakeBtn"),stop:this.querySelector("#stopBtn"),preview:this.querySelector("#preview"),hidden:this.querySelector("input[type=hidden]"),msg:this.querySelector("#camMsg"),shutter:this.querySelector("#shutter")},this.$.start.addEventListener("click",()=>this.start()),this.$.snap.addEventListener("click",()=>this.snap()),this.$.retake.addEventListener("click",()=>this.retake()),this.$.stop.addEventListener("click",()=>this.stop()),navigator.permissions&&navigator.permissions.query&&navigator.permissions.query({name:"camera"}).then(t=>{"granted"===t.state&&this.start()}).catch(()=>{})}async start(){try{if(!navigator.mediaDevices?.getUserMedia)return void this.note("Camera not supported in this browser.");this.note("Starting cameraâ€¦"),this.#t=await navigator.mediaDevices.getUserMedia({video:{facingMode:"user",width:{ideal:640},height:{ideal:480}},audio:!1}),this.$.video.srcObject=this.#t,this.$.snap.disabled=!1,this.$.stop.disabled=!1,this.$.retake.disabled=!0,this.$.canvas.hidden=!0,this.note("Camera ready.")}catch(t){this.note("Camera error: "+(t?.message||t))}}snap(){try{if(!this.#t)return;const t=this.$.video.videoWidth||640,e=this.$.video.videoHeight||480;this.$.canvas.width=t,this.$.canvas.height=e,this.$.canvas.getContext("2d").drawImage(this.$.video,0,0,t,e);const s=this.$.canvas.toDataURL("image/jpeg",.9);this.$.hidden.value=s,this.$.preview.src=s,this.$.shutter.currentTime=0,this.$.shutter.play().catch(()=>{}),this.$.retake.disabled=!1,this.$.snap.disabled=!0;const a=Math.ceil(3*(s.length-23)/4);a>15e5?this.note("Snapshot is large (~"+Math.round(a/1024)+" KB). Consider retaking."):this.note("Photo captured.")}catch(t){this.note("Snap failed: "+(t?.message||t))}}retake(){this.$.hidden.value="",this.$.preview.removeAttribute("src"),this.$.snap.disabled=!1,this.$.retake.disabled=!0,this.note("Ready to retake.")}stop(){try{this.#t?.getTracks().forEach(t=>t.stop()),this.#t=null,this.$.video.srcObject=null,this.$.snap.disabled=!0,this.$.stop.disabled=!0,this.$.retake.disabled=!0,this.note("Camera stopped.")}catch(t){this.note("Stop failed.")}}note(t){this.$.msg.textContent=t}}customElements.define("camera-capture",CameraCapture);